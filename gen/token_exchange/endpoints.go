// Code generated by goa v3.16.1, DO NOT EDIT.
//
// tokenExchange endpoints
//
// Command:
// $ goa gen k8s-federated-credential-api/design

package tokenexchange

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "tokenExchange" service endpoints.
type Endpoints struct {
	ExchangeToken goa.Endpoint
}

// NewEndpoints wraps the methods of the "tokenExchange" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ExchangeToken: NewExchangeTokenEndpoint(s),
	}
}

// Use applies the given middleware to all the "tokenExchange" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ExchangeToken = m(e.ExchangeToken)
}

// NewExchangeTokenEndpoint returns an endpoint function that calls the method
// "exchangeToken" of service "tokenExchange".
func NewExchangeTokenEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ExchangeTokenPayload)
		return s.ExchangeToken(ctx, p)
	}
}
