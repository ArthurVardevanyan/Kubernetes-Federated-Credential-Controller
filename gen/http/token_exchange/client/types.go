// Code generated by goa v3.16.1, DO NOT EDIT.
//
// tokenExchange HTTP client types
//
// Command:
// $ goa gen k8s-federated-credential-api/design

package client

import (
	tokenexchange "k8s-federated-credential-api/gen/token_exchange"

	goa "goa.design/goa/v3/pkg"
)

// ExchangeTokenRequestBody is the type of the "tokenExchange" service
// "exchangeToken" endpoint HTTP request body.
type ExchangeTokenRequestBody struct {
	// The JWT Token from the impersonating service account
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
	// The target namespace for impersonation
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// The target serviceAccount
	ServiceAccountName *string `form:"serviceAccountName,omitempty" json:"serviceAccountName,omitempty" xml:"serviceAccountName,omitempty"`
}

// ExchangeTokenResponseBody is the type of the "tokenExchange" service
// "exchangeToken" endpoint HTTP response body.
type ExchangeTokenResponseBody struct {
	// The status information with a token
	Status *StatusResponseBody `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// StatusResponseBody is used to define fields on response body types.
type StatusResponseBody struct {
	// The status token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// NewExchangeTokenRequestBody builds the HTTP request body from the payload of
// the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenRequestBody(p *tokenexchange.ExchangeTokenPayload) *ExchangeTokenRequestBody {
	body := &ExchangeTokenRequestBody{
		JWT:                p.JWT,
		Namespace:          p.Namespace,
		ServiceAccountName: p.ServiceAccountName,
	}
	return body
}

// NewExchangeTokenStatusResultOK builds a "tokenExchange" service
// "exchangeToken" endpoint result from a HTTP "OK" response.
func NewExchangeTokenStatusResultOK(body *ExchangeTokenResponseBody) *tokenexchange.StatusResult {
	v := &tokenexchange.StatusResult{}
	v.Status = unmarshalStatusResponseBodyToTokenexchangeStatus(body.Status)

	return v
}

// ValidateExchangeTokenResponseBody runs the validations defined on
// ExchangeTokenResponseBody
func ValidateExchangeTokenResponseBody(body *ExchangeTokenResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if err2 := ValidateStatusResponseBody(body.Status); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStatusResponseBody runs the validations defined on StatusResponseBody
func ValidateStatusResponseBody(body *StatusResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}
