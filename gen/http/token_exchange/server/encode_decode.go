// Code generated by goa v3.16.1, DO NOT EDIT.
//
// tokenExchange HTTP server encoders and decoders
//
// Command:
// $ goa gen k8s-federated-credential-api/design

package server

import (
	"context"
	"errors"
	"io"
	tokenexchange "k8s-federated-credential-api/gen/token_exchange"
	"net/http"
	"strings"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeExchangeTokenResponse returns an encoder for responses returned by the
// tokenExchange exchangeToken endpoint.
func EncodeExchangeTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*tokenexchange.StatusResult)
		enc := encoder(ctx, w)
		body := NewExchangeTokenResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeExchangeTokenRequest returns a decoder for requests sent to the
// tokenExchange exchangeToken endpoint.
func DecodeExchangeTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body ExchangeTokenRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateExchangeTokenRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			authorization string
		)
		authorization = r.Header.Get("Authorization")
		if authorization == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("Authorization", authorization, "^Bearer [^ ]+"))
		if utf8.RuneCountInString(authorization) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("Authorization", authorization, utf8.RuneCountInString(authorization), 2000, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewExchangeTokenPayload(&body, authorization)
		if strings.Contains(payload.Authorization, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Authorization, " ", 2)[1]
			payload.Authorization = cred
		}

		return payload, nil
	}
}

// EncodeExchangeTokenError returns an encoder for errors returned by the
// exchangeToken tokenExchange endpoint.
func EncodeExchangeTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "internal_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "forbidden":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "not_acceptable":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenNotAcceptableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotAcceptable)
			return enc.Encode(body)
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "bad_request_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenBadRequestErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unsupported_media_type":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenUnsupportedMediaTypeResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnsupportedMediaType)
			return enc.Encode(body)
		case "too_many_requests":
			var res *goa.ServiceError
			errors.As(v, &res)
			ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewExchangeTokenTooManyRequestsResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusTooManyRequests)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalTokenexchangeStatusToStatusResponseBody builds a value of type
// *StatusResponseBody from a value of type *tokenexchange.Status.
func marshalTokenexchangeStatusToStatusResponseBody(v *tokenexchange.Status) *StatusResponseBody {
	res := &StatusResponseBody{
		Token: v.Token,
	}

	return res
}
