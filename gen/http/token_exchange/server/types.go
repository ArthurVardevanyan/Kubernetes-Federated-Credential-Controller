// Code generated by goa v3.16.1, DO NOT EDIT.
//
// tokenExchange HTTP server types
//
// Command:
// $ goa gen k8s-federated-credential-api/design

package server

import (
	tokenexchange "k8s-federated-credential-api/gen/token_exchange"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// ExchangeTokenRequestBody is the type of the "tokenExchange" service
// "exchangeToken" endpoint HTTP request body.
type ExchangeTokenRequestBody struct {
	// The target namespace for impersonation
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// The target serviceAccount
	ServiceAccountName *string `form:"serviceAccountName,omitempty" json:"serviceAccountName,omitempty" xml:"serviceAccountName,omitempty"`
}

// ExchangeTokenResponseBody is the type of the "tokenExchange" service
// "exchangeToken" endpoint HTTP response body.
type ExchangeTokenResponseBody struct {
	// The status information with a token
	Status *StatusResponseBody `form:"status" json:"status" xml:"status"`
}

// ExchangeTokenInternalErrorResponseBody is the type of the "tokenExchange"
// service "exchangeToken" endpoint HTTP response body for the "internal_error"
// error.
type ExchangeTokenInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeTokenForbiddenResponseBody is the type of the "tokenExchange"
// service "exchangeToken" endpoint HTTP response body for the "forbidden"
// error.
type ExchangeTokenForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeTokenNotFoundResponseBody is the type of the "tokenExchange" service
// "exchangeToken" endpoint HTTP response body for the "not_found" error.
type ExchangeTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeTokenNotAcceptableResponseBody is the type of the "tokenExchange"
// service "exchangeToken" endpoint HTTP response body for the "not_acceptable"
// error.
type ExchangeTokenNotAcceptableResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeTokenUnauthorizedResponseBody is the type of the "tokenExchange"
// service "exchangeToken" endpoint HTTP response body for the "unauthorized"
// error.
type ExchangeTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeTokenBadRequestErrorResponseBody is the type of the "tokenExchange"
// service "exchangeToken" endpoint HTTP response body for the
// "bad_request_error" error.
type ExchangeTokenBadRequestErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeTokenUnsupportedMediaTypeResponseBody is the type of the
// "tokenExchange" service "exchangeToken" endpoint HTTP response body for the
// "unsupported_media_type" error.
type ExchangeTokenUnsupportedMediaTypeResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExchangeTokenTooManyRequestsResponseBody is the type of the "tokenExchange"
// service "exchangeToken" endpoint HTTP response body for the
// "too_many_requests" error.
type ExchangeTokenTooManyRequestsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusResponseBody is used to define fields on response body types.
type StatusResponseBody struct {
	// The status token
	Token string `form:"token" json:"token" xml:"token"`
}

// NewExchangeTokenResponseBody builds the HTTP response body from the result
// of the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenResponseBody(res *tokenexchange.StatusResult) *ExchangeTokenResponseBody {
	body := &ExchangeTokenResponseBody{}
	if res.Status != nil {
		body.Status = marshalTokenexchangeStatusToStatusResponseBody(res.Status)
	}
	return body
}

// NewExchangeTokenInternalErrorResponseBody builds the HTTP response body from
// the result of the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenInternalErrorResponseBody(res *goa.ServiceError) *ExchangeTokenInternalErrorResponseBody {
	body := &ExchangeTokenInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenForbiddenResponseBody builds the HTTP response body from the
// result of the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenForbiddenResponseBody(res *goa.ServiceError) *ExchangeTokenForbiddenResponseBody {
	body := &ExchangeTokenForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenNotFoundResponseBody builds the HTTP response body from the
// result of the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenNotFoundResponseBody(res *goa.ServiceError) *ExchangeTokenNotFoundResponseBody {
	body := &ExchangeTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenNotAcceptableResponseBody builds the HTTP response body from
// the result of the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenNotAcceptableResponseBody(res *goa.ServiceError) *ExchangeTokenNotAcceptableResponseBody {
	body := &ExchangeTokenNotAcceptableResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenUnauthorizedResponseBody builds the HTTP response body from
// the result of the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenUnauthorizedResponseBody(res *goa.ServiceError) *ExchangeTokenUnauthorizedResponseBody {
	body := &ExchangeTokenUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenBadRequestErrorResponseBody builds the HTTP response body
// from the result of the "exchangeToken" endpoint of the "tokenExchange"
// service.
func NewExchangeTokenBadRequestErrorResponseBody(res *goa.ServiceError) *ExchangeTokenBadRequestErrorResponseBody {
	body := &ExchangeTokenBadRequestErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenUnsupportedMediaTypeResponseBody builds the HTTP response
// body from the result of the "exchangeToken" endpoint of the "tokenExchange"
// service.
func NewExchangeTokenUnsupportedMediaTypeResponseBody(res *goa.ServiceError) *ExchangeTokenUnsupportedMediaTypeResponseBody {
	body := &ExchangeTokenUnsupportedMediaTypeResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenTooManyRequestsResponseBody builds the HTTP response body
// from the result of the "exchangeToken" endpoint of the "tokenExchange"
// service.
func NewExchangeTokenTooManyRequestsResponseBody(res *goa.ServiceError) *ExchangeTokenTooManyRequestsResponseBody {
	body := &ExchangeTokenTooManyRequestsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewExchangeTokenPayload builds a tokenExchange service exchangeToken
// endpoint payload.
func NewExchangeTokenPayload(body *ExchangeTokenRequestBody, authorization string) *tokenexchange.ExchangeTokenPayload {
	v := &tokenexchange.ExchangeTokenPayload{
		Namespace:          *body.Namespace,
		ServiceAccountName: *body.ServiceAccountName,
	}
	v.Authorization = authorization

	return v
}

// ValidateExchangeTokenRequestBody runs the validations defined on
// ExchangeTokenRequestBody
func ValidateExchangeTokenRequestBody(body *ExchangeTokenRequestBody) (err error) {
	if body.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("namespace", "body"))
	}
	if body.ServiceAccountName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("serviceAccountName", "body"))
	}
	if body.Namespace != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.namespace", *body.Namespace, "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"))
	}
	if body.Namespace != nil {
		if utf8.RuneCountInString(*body.Namespace) > 253 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.namespace", *body.Namespace, utf8.RuneCountInString(*body.Namespace), 253, false))
		}
	}
	if body.ServiceAccountName != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.serviceAccountName", *body.ServiceAccountName, "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*"))
	}
	if body.ServiceAccountName != nil {
		if utf8.RuneCountInString(*body.ServiceAccountName) > 253 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.serviceAccountName", *body.ServiceAccountName, utf8.RuneCountInString(*body.ServiceAccountName), 253, false))
		}
	}
	return
}
