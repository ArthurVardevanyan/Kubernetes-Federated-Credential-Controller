// Code generated by goa v3.16.1, DO NOT EDIT.
//
// tokenExchange HTTP server types
//
// Command:
// $ goa gen k8s-federated-credential-api/design

package server

import (
	tokenexchange "k8s-federated-credential-api/gen/token_exchange"
)

// ExchangeTokenRequestBody is the type of the "tokenExchange" service
// "exchangeToken" endpoint HTTP request body.
type ExchangeTokenRequestBody struct {
	// The JWT Token from the impersonating service account
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
	// The target namespace for impersonation
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// The target serviceAccount
	ServiceAccountName *string `form:"serviceAccountName,omitempty" json:"serviceAccountName,omitempty" xml:"serviceAccountName,omitempty"`
}

// ExchangeTokenResponseBody is the type of the "tokenExchange" service
// "exchangeToken" endpoint HTTP response body.
type ExchangeTokenResponseBody struct {
	// The status information with a token
	Status *StatusResponseBody `form:"status" json:"status" xml:"status"`
}

// StatusResponseBody is used to define fields on response body types.
type StatusResponseBody struct {
	// The status token
	Token string `form:"token" json:"token" xml:"token"`
}

// NewExchangeTokenResponseBody builds the HTTP response body from the result
// of the "exchangeToken" endpoint of the "tokenExchange" service.
func NewExchangeTokenResponseBody(res *tokenexchange.StatusResult) *ExchangeTokenResponseBody {
	body := &ExchangeTokenResponseBody{}
	if res.Status != nil {
		body.Status = marshalTokenexchangeStatusToStatusResponseBody(res.Status)
	}
	return body
}

// NewExchangeTokenPayload builds a tokenExchange service exchangeToken
// endpoint payload.
func NewExchangeTokenPayload(body *ExchangeTokenRequestBody) *tokenexchange.ExchangeTokenPayload {
	v := &tokenexchange.ExchangeTokenPayload{
		JWT:                body.JWT,
		Namespace:          body.Namespace,
		ServiceAccountName: body.ServiceAccountName,
	}

	return v
}
